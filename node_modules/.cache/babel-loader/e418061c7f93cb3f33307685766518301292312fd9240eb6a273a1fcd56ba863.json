{"ast":null,"code":"const insertionSort = (array, position, arraySteps, colorSteps) => {\n  let colorKey = colorSteps[colorSteps.length - 1].slice();\n  let i, j, key;\n  for (i = 1; i < array.length; i++) {\n    key = array[i];\n    j = i - 1;\n    while (j >= 0 && array[j] > key) {\n      array[j + 1] = array[j];\n      arraySteps.push(array.slice());\n      colorKey[i] = 3;\n      if (i === j + 1) {\n        colorKey[j + 1] = 4;\n      } else {\n        colorKey[j + 1] = 1;\n      }\n      colorKey[j] = 1;\n      colorSteps.push(colorKey.slice());\n      colorKey[j + 1] = 0;\n      colorKey[i] = 0;\n      colorKey[j] = 0;\n      j = j - 1;\n    }\n    array[j + 1] = key;\n    arraySteps.push(array.slice());\n    colorSteps.push(colorKey.slice());\n  }\n  colorSteps[colorSteps.length - 1] = new Array(array.length).fill(2);\n};\nexport default insertionSort;","map":{"version":3,"names":["insertionSort","array","position","arraySteps","colorSteps","colorKey","length","slice","i","j","key","push","Array","fill"],"sources":["E:/Sorting-Visualiser/sorting-visualiser/src/algorithms/InsertionSort.js"],"sourcesContent":["const insertionSort = (array, position, arraySteps, colorSteps) => {\r\n\tlet colorKey = colorSteps[colorSteps.length - 1].slice();\r\n\r\n\tlet i, j, key;\r\n\tfor (i = 1; i < array.length; i++) {\r\n\t\tkey = array[i];\r\n\t\tj = i - 1;\r\n\r\n\t\twhile (j >= 0 && array[j] > key) {\r\n\t\t\tarray[j + 1] = array[j];\r\n\t\t\tarraySteps.push(array.slice());\r\n\t\t\tcolorKey[i] = 3;\r\n            if ( i === j + 1 ){\r\n                colorKey[j + 1] = 4;\r\n            } else{\r\n                colorKey[j + 1] = 1;\r\n            }\r\n\t\t\tcolorKey[j] = 1;\r\n\t\t\tcolorSteps.push(colorKey.slice());\r\n            colorKey[j + 1] = 0;\r\n            colorKey[i] = 0;\r\n\t\t\tcolorKey[j] = 0;\r\n\t\t\tj = j - 1;\r\n\t\t}\r\n\t\tarray[j + 1] = key;\r\n\t\tarraySteps.push(array.slice());\r\n\t\tcolorSteps.push(colorKey.slice());\r\n\t}\r\n\tcolorSteps[colorSteps.length - 1] = new Array(array.length).fill(2);\r\n};\r\n\r\nexport default insertionSort;"],"mappings":"AAAA,MAAMA,aAAa,GAAGA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,UAAU,KAAK;EAClE,IAAIC,QAAQ,GAAGD,UAAU,CAACA,UAAU,CAACE,MAAM,GAAG,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;EAExD,IAAIC,CAAC,EAAEC,CAAC,EAAEC,GAAG;EACb,KAAKF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,KAAK,CAACK,MAAM,EAAEE,CAAC,EAAE,EAAE;IAClCE,GAAG,GAAGT,KAAK,CAACO,CAAC,CAAC;IACdC,CAAC,GAAGD,CAAC,GAAG,CAAC;IAET,OAAOC,CAAC,IAAI,CAAC,IAAIR,KAAK,CAACQ,CAAC,CAAC,GAAGC,GAAG,EAAE;MAChCT,KAAK,CAACQ,CAAC,GAAG,CAAC,CAAC,GAAGR,KAAK,CAACQ,CAAC,CAAC;MACvBN,UAAU,CAACQ,IAAI,CAACV,KAAK,CAACM,KAAK,CAAC,CAAC,CAAC;MAC9BF,QAAQ,CAACG,CAAC,CAAC,GAAG,CAAC;MACN,IAAKA,CAAC,KAAKC,CAAC,GAAG,CAAC,EAAE;QACdJ,QAAQ,CAACI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;MACvB,CAAC,MAAK;QACFJ,QAAQ,CAACI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;MACvB;MACTJ,QAAQ,CAACI,CAAC,CAAC,GAAG,CAAC;MACfL,UAAU,CAACO,IAAI,CAACN,QAAQ,CAACE,KAAK,CAAC,CAAC,CAAC;MACxBF,QAAQ,CAACI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;MACnBJ,QAAQ,CAACG,CAAC,CAAC,GAAG,CAAC;MACxBH,QAAQ,CAACI,CAAC,CAAC,GAAG,CAAC;MACfA,CAAC,GAAGA,CAAC,GAAG,CAAC;IACV;IACAR,KAAK,CAACQ,CAAC,GAAG,CAAC,CAAC,GAAGC,GAAG;IAClBP,UAAU,CAACQ,IAAI,CAACV,KAAK,CAACM,KAAK,CAAC,CAAC,CAAC;IAC9BH,UAAU,CAACO,IAAI,CAACN,QAAQ,CAACE,KAAK,CAAC,CAAC,CAAC;EAClC;EACAH,UAAU,CAACA,UAAU,CAACE,MAAM,GAAG,CAAC,CAAC,GAAG,IAAIM,KAAK,CAACX,KAAK,CAACK,MAAM,CAAC,CAACO,IAAI,CAAC,CAAC,CAAC;AACpE,CAAC;AAED,eAAeb,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}